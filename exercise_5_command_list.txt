5. Distal regulatory activity REGULATORY_ELEMENTS (NOT 2)

From section 4., you should have obtained a set of ATAC-seq peaks in stomach and sigmoid_colon that lie outside gene coordinates. We will use these peaks as a starting point to build a catalogue of distal regulatory regions.
======================================

cp peaks.outside.gene.stomach.txt /home/edperry1/epigenomics_uvic/regulatory_elements
cp peaks.outside.gene.sigmoid_colon.txt /home/edperry1/epigenomics_uvic/regulatory_elements


===========================================

Task 1: Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.

mkdir /epigenomics_uvic/regulatory_elements

=======================================================

Task 2: Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they?

------------------------------------------
select files from metadata:

grep -F H3K4me1 metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.peaks.ids.H3K4me1.txt

grep -F H3K27ac metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.peaks.ids.H3K27ac.txt

--------------------------------------------
Download bigBed files:

cut -f1 analyses/bigBed.peaks.ids.H3K4me1.txt |\
while read filename; do
  wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

cut -f1 analyses/bigBed.peaks.ids.H3K27ac.txt |\
while read filename; do
  wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

--------------------------------------------
Convert bigBed files to bed files:

mkdir data/bed.files

cut -f1 analyses/bigBed.peaks.ids.H3K4me1.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

cut -f1 analyses/bigBed.peaks.ids.H3K27ac.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done

--------------------------
Retrieve gene coordinates from genome annotation file in bed format:

cut -d ";" -f1 annotation/gencode.v24.primary_assembly.annotation.gtf|\
awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' |\
sed 's/\"//g' > annotation/gencode.v24.bed
=================================================
-------------------------------------------
H3K27 sigmoid colon peaks outside of gene:

bedtools intersect -a data/bed.files/ENCFF872UHN.bed -b annotation/gencode.v24.bed -v |\
sort -u > analyses/peaks.analysis/H3K27ac.sigmoid_colon.txt
done

bedtools intersect -a peaks.outside.gene.sigmoid_colon.txt -b analyses/peaks.analysis/H3K27ac.sigmoid_colon.txt -u|\
sort -u > analyses/peaks.analysis/ATAC-seq.H3K27ac.sigmoid_colon.txt

---------------------------------
H3K4me1 sigmoid colon peaks outside of gene:

bedtools intersect -a data/bed.files/ENCFF724ZOF.bed -b annotation/gencode.v24.bed -v |\
sort -u > analyses/peaks.analysis/H3K4me1.sigmoid_colon.txt
done

bedtools intersect -a peaks.outside.gene.sigmoid_colon.txt -b analyses/peaks.analysis/H3K4me1.sigmoid_colon.txt -u|\
sort -u > analyses/peaks.analysis/ATAC-seq.H3K4me1.sigmoid_colon.txt
-------------------------------------
H3K4me1 stomach peaks outside of gene:

bedtools intersect -a data/bed.files/ENCFF844XRN.bed -b annotation/gencode.v24.bed -v |\
sort -u > analyses/peaks.analysis/H3K4me1.stomach.txt
done

bedtools intersect -a peaks.outside.gene.stomach.txt -b analyses/peaks.analysis/H3K4me1.stomach.txt -u|\
sort -u > analyses/peaks.analysis/ATAC-seq.H3K4me1.stomach.txt
--------------------------------------
H3K27ac stomach peaks outside of gene:

bedtools intersect -a data/bed.files/ENCFF977LBD.bed -b annotation/gencode.v24.bed -v |\
sort -u > analyses/peaks.analysis/H3K27ac.stomach.txt
done

bedtools intersect -a peaks.outside.gene.stomach.txt -b analyses/peaks.analysis/H3K27ac.stomach.txt -u|\
sort -u > analyses/peaks.analysis/ATAC-seq.H3K27ac.stomach.txt

------------------------
count:

wc -l analyses/peaks.analysis/ATAC-seq.H3K27ac.sigmoid_colon.txt
wc -l analyses/peaks.analysis/ATAC-seq.H3K4me1.sigmoid_colon.txt
wc -l analyses/peaks.analysis/ATAC-seq.H3K4me1.stomach.txt
wc -l analyses/peaks.analysis/ATAC-seq.H3K27ac.stomach.txt


===========================================================================

Task 3: Focus on regulatory elements that are located on chromosome 1 (hint: to parse a file based on the value of a specific column, have a look at what we did here), and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region:

grep "^chr1\s" analyses/peaks.analysis/ATAC-seq.H3K27ac.sigmoid_colon.txt | grep "^chr1\s" analyses/peaks.analysis/ATAC-seq.H3K27ac.stomach.txt | grep "^chr1\s" analyses/peaks.analysis/ATAC-seq.H3K4me1.stomach.txt | grep "^chr1\s" analyses/peaks.analysis/ATAC-seq.H3K4me1.sigmoid_colon.txt | cut -f4,2 > regulatory.elements.starts.tsv

=======================================================================
Task 4: Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3'). Use the command below as a starting point:

grep "^chr1\s" gencode.v24.bed | awk 'BEGIN{FS=OFS="\t"}{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' > gene.starts.tsv

======================================================================
Task 5: Download or copy this python script inside the epigenomics_uvic/bin folder. Have a look at the help page of this script to understand how it works:

-------------------------------------
Create python document:
----------------------------------

#************
# LIBRARIES *
#************

import sys
from optparse import OptionParser


#*****************
# OPTION PARSING *
#*****************

parser = OptionParser()
parser.add_option("-i", "--input", dest="input")
parser.add_option("-s", "--start", dest="start")
options, args = parser.parse_args()

open_input = open(options.input)
enhancer_start = int(options.start)


#********
# BEGIN *
#********

x=1000000 # set maximum distance to 1 Mb
selectedGene="" # initialize the gene as empty
selectedGeneStart=0 # initialize the start coordinate of the gene as empty

for line in open_input.readlines():  # for each line in the input file
    gene, position = line.strip().split('\t')  # split the line into two columns based on a tab
    position = int(position) # define a variable called position that correspond to the integer of the start of the gene
    abs_value = abs(position - enhancer_start) # compute the absolute value of the difference between position and enhancer_start

    if abs_value < x:  # if this absolute value is lower than x
        x = abs_value  # this value will now be your current x
        selectedGene = gene  # save gene as selectedGene
        selectedGeneStart = position  # save position as selectedGeneStart

print("\t".join([selectedGene, str(selectedGeneStart), str(x)]))

-----------------------------------------------
run script to check its working:
-------------------------------------------

python ../bin/get.distance.py --input /home/edperry1/epigenomics_uvic/regulatory_elements/annotation/gene.starts.tsv --start 980000
ENSG00000187642.9       980657  657

-Correct gene but incorrect value

===================================================================================================
Task 6. For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above. Use the command below as a starting point:
===============================================================================================

awk -F '\t' -v OFS='\t' -v a=2 -v b=1 '{
    t  = $a
    $a = $b
    $b = t
    print 
}' regulatory.elements.starts.tsv > regulatory.elements.starts2.tsv

cat /home/edperry1/epigenomics_uvic/regulatory_elements/regulatory.elements.starts2.tsv | while read element start; do 
   python ../bin/get.distance.py --input /home/edperry1/epigenomics_uvic/regulatory_elements/annotation/gene.starts.tsv --start $start
done > /home/edperry1/epigenomics_uvic/regulatory_elements/regulatoryElements.genes.distances.tsv


========================================================================================
Task 7: Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv.
===========================================================================================

R

data <- read.table("regulatoryElements.genes.distances.tsv", header=FALSE, sep="\t")

mean(data$V3)
[1] 19276.2

median(data$V3)
[1] 10194
